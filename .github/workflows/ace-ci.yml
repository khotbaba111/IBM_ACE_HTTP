name: IBM ACE CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # -------------------------------------------------
  # ðŸ§± Job 1: Build and Test IBM ACE Application
  # -------------------------------------------------
  build-ace:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Login to IBM Cloud Container Registry
        run: echo "${{ secrets.IBM_CLOUD_API_KEY }}" | docker login -u iamapikey --password-stdin icr.io

      - name: Pull IBM ACE Docker image
        run: docker pull ibmcom/ace:11.0.0.0

      - name: Build BAR file
        run: |
          docker run --rm \
            -e LICENSE=accept \
            -v ${{ github.workspace }}:/workspace \
            ibmcom/ace:11.0.0.0 \
            bash -c "cd /workspace && mqsipackagebar -a http_app.bar --w /workspace"

      - name: Upload BAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: http_app
          path: http_app.bar

  # -------------------------------------------------
  # ðŸ§ª Job 2: Run Python Unit Tests
  # -------------------------------------------------
  test-python:
    needs: build-ace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Start ACE container for testing
        run: |
          docker build -t ace-test .
          docker run -d -p 7600:7600 --name ace-container ace-test
          sleep 25

      - name: Run Pytest tests
        run: pytest tests/ --maxfail=1 --disable-warnings -q

      - name: Stop and remove ACE container
        if: always()
        run: |
          docker stop ace-container
          docker rm ace-container

  # -------------------------------------------------
  # ðŸš€ Job 3: Deploy to AWS ECS
  # -------------------------------------------------
  deploy:
    needs: test-python
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_AWS }}
          aws-secret-access-key: ${{ secrets.ACCESS_SECRET_KEY_AWS }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: loan_app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: flask_app_defination-revision1.json
          container-name: flask_container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: flask_app_defination-service-93om3zet
          cluster: loan-app-cluster
          wait-for-service-stability: true
